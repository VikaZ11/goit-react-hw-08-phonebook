{"version":3,"file":"static/js/987.058ed0ae.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.contacts.items;\n\nexport const getIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const getError = state => state.contacts.contacts.error;\n\nexport const getFilter = state => state.contacts.filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Input, FormLabel, Button, FormControl } from '@chakra-ui/react';\nimport { useToast } from '@chakra-ui/react';\nimport { addContacts } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nexport function ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const checkName = name => {\n    return contacts.map(contact => contact.name).includes(name.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const {\n      elements: { name, number },\n    } = e.currentTarget;\n    if (checkName(name)) {\n      toast({\n        title: `${name.value} is already exist in contacts.`,\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n        position: 'top-right',\n      });\n      name.value = '';\n      number.value = '';\n      return;\n    }\n\n    const newContact = {\n      name: name.value,\n      number: number.value,\n    };\n\n    dispatch(addContacts(newContact));\n    name.value = '';\n    number.value = '';\n    toast({\n      title: 'Contact added.',\n      status: 'success',\n      duration: 3000,\n      isClosable: true,\n      position: 'top-right',\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl width=\"400px\" margin={'0 auto'} paddingBottom=\"16px\">\n        <FormLabel>\n          Name\n          <Input\n            placeholder=\"Jacob Mercer\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces.\n              For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            isRequired\n          />\n        </FormLabel>\n      </FormControl>\n\n      <FormControl width=\"400px\" margin={'0 auto'} paddingBottom=\"16px\">\n        <FormLabel>\n          Number\n          <Input\n            placeholder=\"+123-456-789\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            isRequired\n          />\n        </FormLabel>\n      </FormControl>\n      <Button type=\"submit\" margin={'0 auto'} width=\"300px\" display={'block'}>\n        Add contacts\n      </Button>\n    </form>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { FormLabel, Input } from '@chakra-ui/react';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { changeFilter } from '../../redux/contacts/contactsSlice';\n\nexport const Filter = () => {\n  const filteredContacts = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FormLabel>\n      Enter name:\n      <Input\n        type=\"text\"\n        value={filteredContacts}\n        onChange={e => dispatch(changeFilter(e.target.value.toLowerCase()))}\n      />\n    </FormLabel>\n  );\n};\n","import { Avatar, Flex, Text, Button } from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filterContacts = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = (contacts, filter) => {\n    if (!filterContacts) {\n      return contacts;\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  };\n\n  const visibleContacts = getVisibleContacts(contacts, filterContacts);\n\n  return (\n    <>\n      {visibleContacts.length !== 0 ? (\n        visibleContacts.map(({ id, name, number }) => {\n          return (\n            <Flex\n              key={id}\n              justifyContent={'space-between'}\n              alignItems={'center'}\n              _notLast={{ paddingBottom: '16px' }}\n            >\n              <Avatar name={name} src=\"https://bit.ly/broken-link\" />\n\n              <Text display={'block'} width={'200px'}>\n                {name}\n              </Text>\n\n              <Text>{number}</Text>\n\n              <Button\n                type=\"button\"\n                onClick={() => dispatch(deleteContacts(id))}\n              >\n                <DeleteIcon />\n              </Button>\n            </Flex>\n          );\n        })\n      ) : (\n        <Text textAlign={'center'} paddingTop=\"10px\">\n          The contact book is empty.\n        </Text>\n      )}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  Tab,\n  Tabs,\n  TabList,\n  TabPanels,\n  TabPanel,\n  Progress,\n} from '@chakra-ui/react';\nimport { ContactForm } from 'components/Form/Form';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsLoading, getError } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Tabs\n      isFitted\n      variant=\"enclosed\"\n      border={'1px solid grey'}\n      borderRadius=\"10px\"\n      padding={'10px'}\n    >\n      <TabList mb=\"1em\">\n        <Tab _selected={{ color: 'white', bg: '#7FB2F9' }}>Add contact</Tab>\n        <Tab _selected={{ color: 'white', bg: '#7FB2F9' }}>Contacts</Tab>\n      </TabList>\n      <TabPanels>\n        <TabPanel>\n          <ContactForm />\n        </TabPanel>\n        <TabPanel>\n          <Filter />\n          {isLoading && !error && (\n            <Progress size=\"xs\" isIndeterminate margin={'5px'} />\n          )}\n          <ContactList />\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","ContactForm","useSelector","dispatch","useDispatch","toast","useToast","onSubmit","e","preventDefault","currentTarget","elements","name","number","map","contact","includes","value","checkName","title","status","duration","isClosable","position","newContact","addContacts","width","margin","paddingBottom","I","placeholder","type","pattern","isRequired","display","Filter","filteredContacts","onChange","changeFilter","target","toLowerCase","ContactList","filterContacts","visibleContacts","getVisibleContacts","length","id","justifyContent","alignItems","_notLast","src","onClick","deleteContacts","textAlign","paddingTop","Contacts","useEffect","fetchContacts","isFitted","variant","border","borderRadius","padding","mb","_selected","color","bg","size","isIndeterminate"],"sourceRoot":""}